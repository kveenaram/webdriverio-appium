"use strict";
/* istanbul ignore file */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ThemeForColourTerminals = void 0;
const io_1 = require("@serenity-js/core/lib/io");
const model_1 = require("@serenity-js/core/lib/model");
const TerminalTheme_1 = require("./TerminalTheme");
/**
 * @desc
 *  Base class for {@link TerminalTheme} implementations intended
 *  to print to terminals that support colour output.
 *
 * @extends {TerminalTheme}
 *
 * @public
 * @abstract
 */
class ThemeForColourTerminals extends TerminalTheme_1.TerminalTheme {
    /**
     * @param {chalk~Chalk} chalk
     *
     * @see https://www.npmjs.com/package/chalk
     */
    constructor(chalk) {
        super(new io_1.AssertionReportDiffer({
            expected: line => this.chalk.green(`+ ${line}`),
            actual: line => this.chalk.red(`- ${line}`),
            matching: line => `  ${line}`,
        }));
        this.chalk = chalk;
    }
    /**
     * @desc
     *  Joins the `parts` into a single string and decorates it
     *  using a colour appropriate for a given {@link @serenity-js/core/lib/model~Outcome}.
     *
     * @param {@serenity-js/core/lib/model~Outcome | string} outcome
     *  an instance of an {@link @serenity-js/core/lib/model~Outcome}
     *  or a string class name of one of its implementations.
     *
     * @param {...any[]} parts
     *  the parts of the message to be decorated
     *
     * @returns {string}
     */
    outcome(outcome, ...parts) {
        const outcomeName = (outcome instanceof model_1.Outcome)
            ? outcome.constructor.name
            : outcome;
        switch (outcomeName) {
            case model_1.ExecutionCompromised.name:
                return this.chalk.magenta(this.joined(parts));
            case model_1.ExecutionFailedWithError.name:
            case model_1.ExecutionFailedWithAssertionError.name:
                return this.chalk.red(this.joined(parts));
            case model_1.ImplementationPending.name:
                return this.chalk.blue(this.joined(parts));
            case model_1.ExecutionSkipped.name:
            case model_1.ExecutionIgnored.name:
                return this.chalk.blackBright(this.joined(parts));
            case model_1.ExecutionSuccessful.name:
                return this.chalk.green(this.joined(parts));
        }
    }
    /**
     * @desc
     *  Turns the serialised `expectedValue` and `actualValue` into
     *  a visual diff, so that it's easier for the developer to spot
     *  the difference between the two values.
     *
     * @param {string} expectedValue
     * @param {string} actualValue
     *
     * @returns {string}
     */
    diff(expectedValue, actualValue) {
        return this.differ.diff(expectedValue, actualValue);
    }
}
exports.ThemeForColourTerminals = ThemeForColourTerminals;
//# sourceMappingURL=ThemeForColourTerminals.js.map