import { Stage, StageCrewMember } from '@serenity-js/core';
import { DomainEvent } from '@serenity-js/core/lib/events';
import { Printer } from './Printer';
import { TerminalTheme } from './themes';
/**
 * @desc
 *  Uses [standard output](https://en.wikipedia.org/wiki/Standard_streams)
 *  to report on progress of your Serenity/JS acceptance tests.
 *
 *  `ConsoleReporter` ships with colour themes for both dark and light terminals,
 *  as well as a monochromatic theme for those moments when you're in a noir mood
 *  (or have a terminal that doesn't support colours, like the good old `cmd.exe` on Windows).
 *
 * @example <caption>Registering the reporter programmatically</caption>
 *  import { configure } from '@serenity-js/core';
 *  import { ConsoleReporter } from '@serenity-js/console-reporter';
 *
 *  configure({
 *      crew: [ ConsoleReporter.withDefaultColourSupport() ],
 *  });
 *
 * @example <caption>Registering the reporter using Protractor configuration</caption>
 *  // protractor.conf.js
 *  const { ConsoleReporter } = require('@serenity-js/console-reporter');
 *
 *  exports.config = {
 *    framework:     'custom',
 *    frameworkPath: require.resolve('@serenity-js/protractor/adapter'),
 *
 *    serenity: {
 *      crew: [
 *        ConsoleReporter.withDefaultColourSupport(),
 *      ],
 *      // other Serenity/JS config
 *    },
 *
 *    // other Protractor config
 *  };
 *
 * @public
 * @implements {@serenity-js/core/lib/stage~StageCrewMember}
 */
export declare class ConsoleReporter implements StageCrewMember {
    private readonly printer;
    private readonly theme;
    private readonly stage;
    private startTimes;
    private artifacts;
    private summary;
    private firstError;
    private readonly summaryFormatter;
    /**
     * @desc
     *  Instantiates a `ConsoleReporter` that auto-detects
     *  your terminal's support for colours and use a colour theme
     *  for dark terminals if successful.
     *
     *  Please note that spawning your test process from another process
     *  (by using [npm-failsafe](https://www.npmjs.com/package/npm-failsafe), for example)
     *  causes the `ConsoleReporter` to use the monochromatic colour scheme,
     *  as colour support can't be detected in child processes.
     *
     *  If the above describes your setup, use {@link ConsoleReporter#forDarkTerminals}
     *  or {@link ConsoleReporter#forLightTerminals} to make the sub-process produce colour output.
     *
     * @returns {ConsoleReporter}
     */
    static withDefaultColourSupport(): ConsoleReporter;
    /**
     * @desc
     *  Instantiates a `ConsoleReporter` with a monochromatic colour theme.
     *  Good for terminals with no colour support (like the `cmd.exe` on Windows),
     *  or for when you need to pipe the output to a text file and want
     *  to avoid printing control characters.
     *
     * @returns {ConsoleReporter}
     */
    static forMonochromaticTerminals(): StageCrewMember;
    /**
     * @desc
     *  Instantiates a `ConsoleReporter` with a colour theme optimised for terminals with dark backgrounds.
     *
     * @returns {ConsoleReporter}
     */
    static forDarkTerminals(): StageCrewMember;
    /**
     * @desc
     *  Instantiates a `ConsoleReporter` with a colour theme optimised for terminals with light backgrounds.
     *
     * @returns {ConsoleReporter}
     */
    static forLightTerminals(): StageCrewMember;
    /**
     * @param {Printer} printer
     * @param {TerminalTheme} theme
     * @param {@serenity-js/core/lib/stage~Stage} [stage=null]
     */
    constructor(printer: Printer, theme: TerminalTheme, stage?: Stage);
    /**
     * @desc
     *  Creates a new instance of this {@link @serenity-js/core/lib/stage~StageCrewMember}
     *  and assigns it to a given {@link @serenity-js/core/lib/stage~Stage}.
     *
     * @see {@link @serenity-js/core/lib/stage~StageCrewMember}
     *
     * @param {@serenity-js/core/lib/stage~Stage} stage - An instance of a {@link @serenity-js/core/lib/stage~Stage} this {@link @serenity-js/core/lib/stage~StageCrewMember} will be assigned to
     * @returns {@serenity-js/core/lib/stage~StageCrewMember} - A new instance of this {@link @serenity-js/core/lib/stage~StageCrewMember}
     */
    assignedTo(stage: Stage): ConsoleReporter;
    /**
     * @desc
     *  Handles {@link @serenity-js/core/lib/events~DomainEvent} objects emitted by the {@link @serenity-js/core/lib/stage~StageCrewMember}.
     *
     * @see {@link @serenity-js/core/lib/stage~StageCrewMember}
     *
     * @listens {@serenity-js/core/lib/events~DomainEvent}
     *
     * @param {@serenity-js/core/lib/events~DomainEvent} event
     * @returns {void}
     */
    notifyOf(event: DomainEvent): void;
    private formattedOutcome;
    private deCamelCased;
    private iconFrom;
}
