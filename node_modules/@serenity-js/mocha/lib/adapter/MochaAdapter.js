"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.MochaAdapter = void 0;
const core_1 = require("@serenity-js/core");
const model_1 = require("@serenity-js/core/lib/model");
const fs = __importStar(require("fs"));
const path = __importStar(require("path")); // eslint-disable-line unicorn/import-style
/**
 * Allows for programmatic execution of Mocha test scenarios,
 * using [`SerenityReporterForMocha`](https://serenity-js.org/api/mocha/function/export=/) to report progress.
 *
 * ## Learn more
 * - [`TestRunnerAdapter`](https://serenity-js.org/api/core-adapter/interface/TestRunnerAdapter/)
 *
 * @group Integration
 */
class MochaAdapter {
    config;
    loader;
    mocha;
    totalScenarios;
    constructor(config, loader) {
        this.config = config;
        this.loader = loader;
    }
    /**
     * Scenario success threshold for this test runner.
     */
    successThreshold() {
        return this.config.strict
            ? model_1.ExecutionIgnored
            : model_1.ImplementationPending;
    }
    /**
     * Loads test scenarios.
     *
     * @param pathsToScenarios
     */
    async load(pathsToScenarios) {
        const _Mocha = this.loader.require('mocha');
        this.mocha = new _Mocha({
            ...this.config,
            reporter: require.resolve('../index'),
        });
        this.mocha.fullTrace();
        this.mocha.files = pathsToScenarios;
        this.mocha.suite.on('pre-require', (context, file, mocha) => {
            this.requireAny(this.config.require);
        });
        await this.mocha.loadFilesAsync();
        const mochaRunner = new _Mocha.Runner(this.mocha.suite, {
            delay: false,
        });
        if (this.config.grep) {
            mochaRunner.grep(this.mocha.options.grep, this.config.invert);
        }
        this.totalScenarios = mochaRunner.total;
    }
    /**
     * Returns the number of loaded scenarios
     *
     * @throws [`LogicError`](https://serenity-js.org/api/core/class/LogicError/)
     *  If called before `load`
     */
    scenarioCount() {
        if (this.totalScenarios === undefined) {
            throw new core_1.LogicError('Make sure to call `load` before calling `scenarioCount`');
        }
        return this.totalScenarios;
    }
    /**
     * Runs loaded test scenarios.
     *
     * @throws [`LogicError`](https://serenity-js.org/api/core/class/LogicError/)
     *  If called before `load`
     */
    run() {
        return new Promise((resolve, reject) => {
            if (this.mocha === undefined) {
                throw new core_1.LogicError('Make sure to call `load` before calling `run`');
            }
            this.mocha.run(numberOfFailures => resolve());
        });
    }
    requireAny(filesOrModules) {
        const requires = filesOrModules
            ? [].concat(filesOrModules).filter(item => !!item)
            : [];
        requires.forEach(fileOrModule => {
            const required = fs.existsSync(fileOrModule) || fs.existsSync(`${fileOrModule}.js`)
                ? path.resolve(fileOrModule) // local file
                : fileOrModule; // module
            require(required);
        });
    }
}
exports.MochaAdapter = MochaAdapter;
//# sourceMappingURL=MochaAdapter.js.map